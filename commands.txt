Emacs Commands

* undo, C-x u
* redo, C-g C-_
* save, C-x C-s
* Save buffer as different file, C-x C-w
* Save all open buffers, C-x s
* Insert another file's content into current one, C-x i
* exit (no save), C-x C-c
* next line, C-n
* previous line, C-p
* Move one character forward, C-f
* Move one word forward, M-f
* Move one word backward, M-b
* Move to start of a line, C-a
* Move to end of a line, C-e
* Move to start of a sentence, M-a
* Move to end of a sentence, M-e
* Move one page down, C-v (pgDn)
* Move one page up, M-v (pgUp)
* Move to beginning of file, M-<
* Move to end of file, M->
* Mark (highlight) text, C-space (C-@)
* Select all, C-x h
* Select paragraph, M-h
* copy, M-w
* paste, C-y
* cut, C-w
* delete word, M-d
* delete line, C-k
* delete sentence, M-k
* search (forward), C-s (C-s to see next instance)
* search (backward), C-r (C-r to see next instance)
* replace word, M-% (press '!' to replace all)
* spell check, M-x (type ispell in mini-buffer)
  -a, correct
  -r, replace
* center line, M-o M-s
* change mode (ie c++, java, etc.), M-x (then type; c-mode, java-mode, etc.)
* bold, M-o b
* italic, M-o i
* underline, M-o u
* default, M-o d
* tab, C-q TAB
* keep indentation, C-j
* Find difference between two files, M-x diff (then enter names of files)
* Switch buffer, C-x b (TAB then type buffer name from list of avaliable)
* Kill buffer, C-x k  (TAB then type buffer name from list of avaliable)
* See all open buffers, C-x C-b
* Open different file in current buffer, C-x C-f
* Open buffer in new frame, C-x 5 (type in file name)
* Open split window horizontal, C-x 2
* Open split window vertical, C-x 3
* Close all split windows, C-x 1
* Select next split window, C-x o
* Open terminal in emacs, M-x ansi-term (then hit ENTER)
  -to use limited C-x commands, use C-c <singlecharacter> (e.g. C-c o == C-x o)
* Use mouse in -nw, M-x xterm
* Update buffer if changes occur, C-x C-v (then hit ENTER)
* Auto update buffer if changes occur, M-x (then type global-auto-revert-mode)


===================================================================================================

GitHub Commands

* clone a remote repo (https) to your local repo, git clone <remoteRepoWebAddress>
* clone a remote repo (https) to your local repo with desired directory name, git clone <remoteRepoWebAddress> <directoryName>
* see changes to local repo, git status
* bring up window to see all commits, gitk
* see differences from previous version of file, git diff <file>
* prepare change for commit, git add <file>
* reset modified file to unmerged path (ie no longer ready for commt), git reset HEAD <file> (do a git add after this then, may have to do a few times)
* discard change from commit, git checkout <file>
* commit all added items to local repo, git commit --author "Richard-Trotta <trotta@cua.edu>" -m "<some message>"
* check where remote repo is and name of repo, git remote -v
* remove all files that are untracked, git clean -f
* how to push local repo to remote repo,
  >git status
  >git add --all (for all changes)
  >git commit (do commit procedure above)
  >git pull origin <branch>
  >git push origin <branch> 
* create branch from local repo, git branch <newbranch>
* delete local branch from local repo, git branch -d <branch> (-D forces)
* see all branches, git branch -a
* change branch, git checkout <differentBranch>
* go to remote branch version of local repo, git checkout --track origin/<branch>
* delete remote branch, git push branch origin --delete <branch>
* specify a new remote repo (ie upstream), git remote add upstream <remoteRepo>
* set up upstream where push will default, git push --set-upstream origin <branch>
* block push to a remote repo, git remote set-url --push <remoterepo> <messagereminder>
* replace remote repo (ie upstream), git remote set-url upstream <URLforRemoteRepo>
* rename current branch, git branch -m <newbranchname>
* how to create new branch in local repo and push to remote repo,
  >git branch <newbranch>
  >git checkout <newbranch>
  >git pull origin <newbranch>
  >git push origin <newbranch>
* look at project history, git log --oneline
* see what is different between repo and open submodule, git diff --cached --submodule
* when copying a directory (ie submodule) into your main directory and this submodule is already part of a different repo do the following,
  >git submodule status (to see if any submodules heads are not your repo)
  >cd <submodule>
      >git remote -v (to see which repo submodule is in)
      >git remote set-url origin https://github.com/<username>/<repo> (will point submodule to your repo)
      >git remote -v (you should see origin now assigned to your repo)
      >cd ../<outofsubmodule>
  >git rm --cached <submodule>
  >git status (check to make sure your submodule is untracked)
  >git commit
  >git push
  >git submodule status (your submodule should no longer be on here because it is no longer in your repo, only locally accessible)
  >git add <submodule>
  >git commit 
  >git push
  >git submodule status (double check the submodule is properly in your repo now)

===================================================================================================

Linux Commands

* suspend current activity, C-z
* see all running jobs in terminal, jobs
* resume suspended activity in foreground, fg %# (where # is job number)
* resume suspended activity in background, bg %# (where # is job number)
* kill a job, kill %# (where # is job number)
* find file in directory, find -name "<filename>"
* make python or shell script work, chmod u+x <script>
* run python script, python <script>.py
* see size of file, ls -ltrh
* see path of directories, ls -la
* see amount of data processes, top -u <username>
* see last commands, history
* give anyone permission to edit home directory, chmod o+rw /home/<username> (works for individual directories and files)
* take away permission to edit home directory, chmod o-rw /home/<username> (works for individual directories and files)
* to give permission to members of group to read home directory, drwxr-x---
* by default jlab has most secure permissions on home directory, drwx------
* procedures (ie source root version) automatically on login, emacs ~/.login

===================================================================================================

Batch Job Commands

* run batchscript, jsub <batchscript>
* find where files about batch are found (e.g. *.err), ls ~/.farm_out/
* see job info, jobinfo <jobindex#>
* cancel job, jkill <jobindex#>
* cancel all jobs, jkill 0
* see progress of jobs, jobstat -u <username>
